import React, { useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import clsx from 'clsx';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardContent from '@material-ui/core/CardContent';
import CardActions from '@material-ui/core/CardActions';
import Collapse from '@material-ui/core/Collapse';
import Avatar from '@material-ui/core/Avatar';
import IconButton from '@material-ui/core/IconButton';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import SettingsIcon from '@material-ui/icons/Settings';
import TextField from '@material-ui/core/TextField';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import { Redirect } from "react-router-dom";
import { projectDB } from "firebaseConfig/firebaseConfig.js";

const useStyles = makeStyles((theme) => ({
  root: {
    minWidth: "100%",
  },
  expand: {
    transform: 'rotate(0deg)',
    marginLeft: 'auto',
    transition: theme.transitions.create('transform', {
      duration: theme.transitions.duration.shortest,
    }),
  },
  expandOpen: {
    transform: 'rotate(180deg)',
  },
  userPhoto: {
    objectFit: "cover",
    height: "100%",
    width: "100%",
    display: "block"
  },
  formItem: {
    minWidth: "100%",
  },
  fieldsetMargins: {
    "& > *": {
      margin: "0px 0px 10px 0px",
    },
    "& > :nth-child(4)": {
      margin: 0
    }
  },
  iconButtons: {
    borderRadius: "15px",
    border: "1px solid #88888880",
    margin: "0px 5px 0px 0px",
    padding: "7px",
    "& > .MuiButton-label": {
      flexDirection: "column",
    }
  },
}));

export default function UserInfo(props) {
  const {
    currentLang,
    setIsLogin,
    isLogin,
    userInfo,
    setUserInfo,
    publicationsAmount
  } = props;
  const styles = useStyles();
  const [expanded, setExpanded] = useState(false);
  const [isUpdateUserDataSuccess, setIsUpdateUserDataSuccess] = useState("pending");
  const userInfoTranslate = LangsTranslate[currentLang].userPage.userInfo;

  const handleExpandClick = () => {
    setExpanded(!expanded);
  };
  const formSubmitHandler = (event) => {
    event.preventDefault();
    if (userInfo.name.trim() && userInfo.bio.trim()) {
      projectDB.ref('users/' + localStorage.getItem("currentUserId")).set({
        username: (userInfo.name).trim(),
        userbio: (userInfo.bio).trim(),
        userphoto: userInfo.photo
      }).then(() => setIsUpdateUserDataSuccess(true))
    } else setIsUpdateUserDataSuccess(false);
  }
  const logoutHandler = (e) => {
    localStorage.removeItem("currentUserId");
    setIsLogin(false);
  }
  const userPhotoHandler = (e) => {
    setUserInfo(prev => (
      { ...prev, photo: e.target.value }
    ))
  }
  const userNameHandler = (e) => {
    if (e.target.value.length > 18) {
      e.preventDefault();
      return;
    }
    setUserInfo(prev => (
      { ...prev, name: e.target.value }
    ))
  }
  const userBioHandler = (e) => {
    if (e.target.value.length > 320) {
      e.preventDefault();
      return;
    }
    setUserInfo(prev => (
      { ...prev, bio: e.target.value }
    ))
  }

  if (!isLogin) {
    return <Redirect to="/medium-clone/" />
  }
  return (
    <Card className={styles.root}>
      <CardHeader
        avatar={
          <Avatar aria-label="avatar">
            {userInfo.photo ? <img className={styles.userPhoto} src={userInfo.photo} alt="" /> : null}
          </Avatar>
        }
        action={
          <div style={{ margin: "15px 0px 0px 0px", display: "flex", flexWrap: "wrap", rowGap: "5px" }}>
            <Button
              aria-label="publications"
              onClick={() => { }}
              className={styles.iconButtons}
            >
              {/* <CommentIcon style={{ margin: "0px 5px 0px 0px" }} /> */}
              {/* <span>{(Object.keys(feedComments).length).toLocaleString("en")}</span> */}
              <Typography
                variant="body1"
                color="textPrimary"
              >
                {publicationsAmount}
              </Typography>
              <Typography
                variant="body2"
                color="textSecondary"
              >
                {userInfoTranslate.publications}
              </Typography>
            </Button>
            <Button
              aria-label="subscribers"
              className={styles.iconButtons}
              onClick={() => { }}
            >
              {/* <ThumbUpIcon style={{ margin: "0px 5px 0px 0px" }} />
                <span>{(Object.keys(feedLiked).length).toLocaleString("en")}</span> */}
              <Typography
                variant="body1"
                color="textPrimary"
              >
                1
              </Typography>
              <Typography
                variant="body2"
                color="textSecondary"
              >
                {userInfoTranslate.subscribers}
              </Typography>
            </Button>
            <Button
              aria-label="subscriptions"
              className={styles.iconButtons}
              onClick={() => { }}
            >
              {/* <ThumbDownIcon style={{ margin: "0px 5px 0px 0px" }} />
                <span>{(Object.keys(feedDisliked).length).toLocaleString("en")}</span> */}
              <Typography
                variant="body1"
                color="textPrimary"
              >
                1
              </Typography>
              <Typography
                variant="body2"
                color="textSecondary"
              >
                {userInfoTranslate.subscriptions}
              </Typography>
            </Button>
          </div>
        }
        style={{ flexWrap: "wrap", padding: "15px 15px 8px 15px" }}
        title={userInfo.name}
      />
      {userInfo &&
        <>
          <CardContent style={{ padding: "3px 16px" }}>
            {userInfo.bio.split(/\n/g).map((e, i) => {
              return e ?
                <Typography
                  variant="body2"
                  color="textSecondary"
                  key={i}
                  style={{ wordWrap: "break-word" }}
                >{e}
                </Typography> : <br key={i} />
            })}
          </CardContent>
          <CardActions disableSpacing>
            <Button style={{ marginLeft: "8px" }} variant="outlined" color="primary" aria-label="logout" onClick={logoutHandler}>
              {userInfoTranslate.logout}
            </Button>
            <IconButton
              className={clsx(styles.expand, {
                [styles.expandOpen]: expanded,
              })}
              onClick={handleExpandClick}
              aria-expanded={expanded}
              aria-label="settings"
            >
              <SettingsIcon />
            </IconButton>
          </CardActions>
        </>}
      <Collapse in={expanded} timeout="auto" unmountOnExit>
        {userInfo && <CardContent>
          <form onSubmit={formSubmitHandler} action="#" method="POST">
            <fieldset className={styles.fieldsetMargins}>
              <fieldset>
                <TextField
                  placeholder={userInfoTranslate.urlp}
                  className={styles.formItem}
                  label={userInfoTranslate.urlp}
                  variant="outlined"
                  value={userInfo.photo}
                  onChange={userPhotoHandler}
                />
              </fieldset>
              <fieldset >
                <TextField
                  placeholder={userInfoTranslate.username}
                  label={userInfoTranslate.username}
                  className={styles.formItem}
                  variant="outlined"
                  value={userInfo.name}
                  onChange={userNameHandler}
                  error={!userInfo.name.trim()}
                />
              </fieldset>
              <fieldset >
                <TextField
                  placeholder={userInfoTranslate.bio}
                  label={userInfoTranslate.bio}
                  className={styles.formItem}
                  rows={3}
                  multiline
                  variant="outlined"
                  value={userInfo.bio}
                  onChange={userBioHandler}
                  error={!userInfo.bio.trim()}
                />
              </fieldset>
              <Button
                variant="contained"
                color="primary"
                type="submit"
              >
                {userInfoTranslate.submit}
              </Button>
              {isUpdateUserDataSuccess === "pending" ?
                null :
                isUpdateUserDataSuccess ?
                  <Typography variant="body1" style={{ margin: "0px 0px 0px 10px" }} component="span">
                    {userInfoTranslate.success}
                  </Typography> :
                  <Typography variant="body1" color="error" style={{ margin: "0px 0px 0px 10px" }} component="span">
                    {userInfoTranslate.error}
                  </Typography>}
            </fieldset>
          </form>
        </CardContent>}
      </Collapse>
    </Card>
  );
}
