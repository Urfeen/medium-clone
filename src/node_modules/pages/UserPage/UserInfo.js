import React, { useState, useEffect } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import clsx from 'clsx';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardContent from '@material-ui/core/CardContent';
import CardActions from '@material-ui/core/CardActions';
import Collapse from '@material-ui/core/Collapse';
import Avatar from '@material-ui/core/Avatar';
import IconButton from '@material-ui/core/IconButton';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import SettingsIcon from '@material-ui/icons/Settings';
import TextField from '@material-ui/core/TextField';
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import Loader from "components/Loader/Loader.js";
import LangsTranslate from "LangsTranslate/LangsTranslate.json";

const useStyles = makeStyles((theme) => ({
  root: {
    minWidth: "100%",
  },
  expand: {
    transform: 'rotate(0deg)',
    marginLeft: 'auto',
    transition: theme.transitions.create('transform', {
      duration: theme.transitions.duration.shortest,
    }),
  },
  expandOpen: {
    transform: 'rotate(180deg)',
  },
  userPhoto: {
    objectFit: "cover",
    height: "100%",
    width: "100%",
    display: "block"
  },
  formItem: {
    minWidth: "100%",
  },
  fieldsetMargins: {
    "& > *": {
      margin: "0px 0px 10px 0px",
    },
    "& > :nth-child(4)": {
      margin: 0
    }
  }
}));

export default function UserInfo({ currentLang }) {
  const classes = useStyles();
  const langUserInfo = LangsTranslate[currentLang].userPage.userInfo;
  const [expanded, setExpanded] = React.useState(false);
  const [userInfo, setUserInfo] = useState("");
  const [isUpdateUserDataSuccess, setIsUpdateUserDataSuccess] = useState("pending");

  const handleExpandClick = () => {
    setExpanded(!expanded);
  };
  const formSubmitHandler = (event) => {
    event.preventDefault();
    if (userInfo.name && userInfo.bio) {
      projectDB.ref('users/' + localStorage.getItem("currentUserId")).set({
        username: userInfo.name,
        userbio: userInfo.bio,
        userphoto: userInfo.photo
      }).then(() => setIsUpdateUserDataSuccess(true))
    } else setIsUpdateUserDataSuccess(false);
  }

  const userPhotoHandler = (e) => {
    setUserInfo(prev => (
      { ...prev, photo: e.target.value }
    ))
  }
  const userNameHandler = (e) => {
    if (e.target.value.length > 30) {
      e.preventDefault();
      return;
    }
    setUserInfo(prev => (
      { ...prev, name: e.target.value }
    ))
  }
  const userBioHandler = (e) => {
    if (e.target.value.length > 320) {
      e.preventDefault();
      return;
    }
    setUserInfo(prev => (
      { ...prev, bio: e.target.value }
    ))
  }

  React.useEffect(() => {
    if (!localStorage.getItem("currentUserId")) return;
    projectDB.ref('users/' + localStorage.getItem("currentUserId")).on('value', (snapshot) => {
      const data = snapshot.val();
      setUserInfo({ name: data.username, photo: data.userphoto, bio: data.userbio });
    });
  }, []);

  return (
    <Card className={classes.root}>
      <CardHeader
        avatar={
          userInfo ?
            <Avatar aria-label="avatar">
              {userInfo.photo ? <img className={classes.userPhoto} src={userInfo.photo} alt="" /> : null}
            </Avatar> :
            <Loader />
        }
        title={userInfo.name}
      />
      {userInfo &&
        <>
          <CardContent style={{ padding: "3px 16px" }}>
            <Typography variant="body2" color="textSecondary" component="p">
              {userInfo.bio}
            </Typography>
          </CardContent>
          <CardActions disableSpacing>
            <Button style={{ marginLeft: "8px" }} variant="outlined" color="primary" aria-label="logout">
              {langUserInfo.logout}
            </Button>
            <IconButton
              className={clsx(classes.expand, {
                [classes.expandOpen]: expanded,
              })}
              onClick={handleExpandClick}
              aria-expanded={expanded}
              aria-label="settings"
            >
              <SettingsIcon />
            </IconButton>
          </CardActions>
        </>}
      <Collapse in={expanded} timeout="auto" unmountOnExit>
        <CardContent>
          <form onSubmit={formSubmitHandler} action="#" method="POST">
            <fieldset className={classes.fieldsetMargins}>
              <fieldset>
                <TextField
                  placeholder={langUserInfo.urlp}
                  className={classes.formItem}
                  label={langUserInfo.urlp}
                  variant="outlined"
                  value={userInfo.photo}
                  onChange={userPhotoHandler}
                />
              </fieldset>
              <fieldset >
                <TextField
                  placeholder={langUserInfo.username}
                  label={langUserInfo.username}
                  className={classes.formItem}
                  variant="outlined"
                  value={userInfo.name}
                  onChange={userNameHandler}
                  error={!userInfo.name}
                />
              </fieldset>
              <fieldset >
                <TextField
                  placeholder={langUserInfo.bio}
                  label={langUserInfo.bio}
                  className={classes.formItem}
                  rows={3}
                  multiline
                  variant="outlined"
                  value={userInfo.bio}
                  onChange={userBioHandler}
                  error={!userInfo.bio}
                />
              </fieldset>
              <Button
                variant="contained"
                color="primary"
                type="submit"
              >
                {langUserInfo.submit}
              </Button>
              {isUpdateUserDataSuccess === "pending" ?
                null :
                isUpdateUserDataSuccess ?
                  <Typography variant="body1" color="default" style={{ margin: "0px 0px 0px 10px" }} component="span">
                    {langUserInfo.success}
                  </Typography> :
                  <Typography variant="body1" color="error" style={{ margin: "0px 0px 0px 10px" }} component="span">
                    {langUserInfo.error}
                  </Typography>}
            </fieldset>
          </form>
        </CardContent>
      </Collapse>
    </Card>
  );
}
