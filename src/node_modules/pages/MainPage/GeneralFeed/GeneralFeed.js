import React, { useState, useEffect } from 'react';
import Feed from "components/Feed/Feed";
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import Button from '@material-ui/core/Button';
import moment from 'moment';
import AddCircleIcon from '@material-ui/icons/AddCircle';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import Typography from "@material-ui/core/Typography";
import useMediaQuery from "@material-ui/core/useMediaQuery";
import Loader from "components/Loader/Loader.js";

const GeneralFeed = ({ currentLang, searchByTagHandler, tabName }) => {
  const [articles, setArticles] = useState(null);
  const [isNoArticles, setIsNoArticles] = useState(false);
  const [articlesAmount, setArticlesAmount] = useState(3);
  const [isEnd, setIsEnd] = useState(false);
  const isMobile = useMediaQuery('(max-width:381px)');

  const getArticlesInfo = (data) => {
    const articles = [];
    Object.entries(data).reverse().map(e => {
      articles.push({
        publishedDate: moment(new Date(+e[0])).format("DD.MM.YYYY"),
        key: e[0],
        comments: e[1].comments || {},
        liked: e[1].liked || {},
        disliked: e[1].disliked || {},
      });
      return Object.entries(e[1])[0];
    }).forEach((e, i) => {
      articles[i].articleOwnerId = e[0];
      for (let articleContent in e[1]) articles[i][articleContent] = e[1][articleContent];
    })
    return articles;
  }

  const deleteArticleHandler = (articleId, userId, articleTags) => {
    projectDB.ref(`articles/${articleId}`)
      .remove()
      .then(() => {
        return projectDB.ref(`users/${userId}/articlesref/${articleId}`)
          .remove()
      })
      .then(() => {
        articleTags.trim().split(" ").forEach((tag) => {
          projectDB.ref(`tags/${tag.substring(1)}/articlesref/${articleId}`)
            .remove();
        })
      })
      .then(() => {
        setArticles(articles => {
          return articles.filter(article => {
            if (article.key !== articleId) return article;
          })
        })
      })
  }

  const setGlobalArticles = () => {
    projectDB.ref('articles/').limitToLast(articlesAmount).on('value', (snapshot) => {
      const data = snapshot.val();
      setIsEnd(snapshot.numChildren() < articlesAmount);
      if (data) setArticles(getArticlesInfo(data));
      else setIsNoArticles(true);
    })
  }
  const setHashtagArticles = (tag) => {
    projectDB.ref(`tags/${tag}/articlesref`).limitToLast(articlesAmount).on('value', (snapshot) => {
      const data = snapshot.val();
      const articles = {};
      Object.keys(data).forEach(articleref => {
        projectDB.ref(`articles/${articleref}`).on('value', (snapshot) => {
          const data = snapshot.val();
          const article = Object.fromEntries([[articleref, data]]);
          Object.assign(articles, article);
        })
      })
      setIsEnd(Object.keys(articles).length < articlesAmount);
      if (data) setArticles(getArticlesInfo(articles));
      else setIsNoArticles(true);
    });
  }

  useEffect(() => {
    if (tabName === "global") setGlobalArticles();
    else if (tabName[0] === "#") setHashtagArticles(tabName.substring(1))
  }, [articlesAmount, tabName])

  useEffect(() => (() => setArticles(null)), []);

  return (
    localStorage.getItem("currentUserId") ?
      <div style={{ display: "grid", gap: "15px" }}>
        {articles && articles.length !== 0 ?
          articles.map(article => {
            return <Feed
              key={article.key}
              articleId={article.key}
              articleDesc={article.articleDesc}
              articleOwnerId={article.articleOwnerId}
              articleTags={article.articleTags}
              articleText={article.articleText}
              articleTitle={article.articleTitle}
              disliked={article.disliked}
              liked={article.liked}
              publishedDate={article.publishedDate}
              currentLang={currentLang}
              comments={article.comments}
              deleteArticleHandler={deleteArticleHandler}
              searchByTagHandler={searchByTagHandler}
            />
          }) : isNoArticles
            ? <div style={{ justifySelf: "center", margin: "10px 0px 10px 0px" }}>{LangsTranslate[currentLang].Feeds.info["no-articles"]}</div>
            : <div style={{ justifySelf: "center", margin: "10px 0px 10px 0px" }}><Loader color="primary" /></div>}
        {isEnd
          ? null
          : articles
            ? <Button
              variant="outlined"
              color="primary"
              style={{ justifySelf: "center" }}
              onClick={() => { setArticlesAmount(prev => prev + 3) }}
            ><AddCircleIcon color="primary" /></Button> : null}
      </div> :
      <div style={isMobile ? { padding: "10px" } : null}>
        <Typography variant="body1" component="p">
          {LangsTranslate[currentLang].Feeds.info.noAuth}
        </Typography>
      </div>
  );
}
export default GeneralFeed;