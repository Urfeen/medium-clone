import React, { useEffect, useState } from "react";
import Paper from '@material-ui/core/Paper';
import Container from '@material-ui/core/Container';
import { withRouter } from "react-router-dom";
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import Loader from "components/Loader/Loader.js";
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardContent from '@material-ui/core/CardContent';
import CardActions from '@material-ui/core/CardActions';
import Collapse from '@material-ui/core/Collapse';
import Avatar from '@material-ui/core/Avatar';
import IconButton from '@material-ui/core/IconButton';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import ThumbDownIcon from '@material-ui/icons/ThumbDown';
import ThumbUpIcon from '@material-ui/icons/ThumbUp';
import CommentIcon from '@material-ui/icons/Comment';
import { makeStyles } from '@material-ui/core/styles';
import Comments from "components/Comments/Comments.js";
import DeleteIcon from '@material-ui/icons/Delete';
import Statistic from "components/Statistic/Statistic.js";
import { NavLink } from "react-router-dom";
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import Divider from '@material-ui/core/Divider';
import moment from "moment";
import EditIcon from '@material-ui/icons/Edit';
import "./markDown.scss";

const useStyles = makeStyles({
  iconButtons: {
    borderRadius: "15px",
    border: "1px solid #88888880",
    margin: "0px 5px 0px 0px",
    padding: "7px"
  },
  userPhoto: {
    objectFit: "cover",
    height: "100%",
    width: "100%",
    display: "block"
  },
  cardHeaderRoot: {
    flexWrap: "wrap",
    padding: "12px",
    alignItems: "center",
    "& > :nth-child(3)": {
      alignSelf: "center",
      marginTop: "0px",
      marginRight: "0px"
    }
  },
  messagesContainer: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "20px"
  },
  appraiserButtons: {
    margin: "15px 0px 0px 0px",
    display: "flex",
    flexWrap: "wrap",
    rowGap: "8px",
    alignItems: 'center'
  }
});

const Article = (props) => {
  const [expanded, setExpanded] = useState(false);
  const articleId = props.match.params.articleId;
  const styles = useStyles();
  const { currentLang } = props;
  const [isArticleExist, setIsArticleExist] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [article, setArticle] = useState();
  const [articleOwnerName, setArticleOwnerName] = useState("");
  const [articleOwnerPhoto, setArticleOwnerPhoto] = useState("");
  const [articleLiked, setArticleLiked] = useState({});
  const [articleDisliked, setArticleDisliked] = useState({});
  const [articleComments, setArticleComments] = useState({});
  const [isAppraisalLoading, setIsAppraisalLoading] = useState(false);
  const handleExpandClick = () => {
    setExpanded(!expanded);
  };
  const feedInfo = LangsTranslate[currentLang].Feeds;

  const deleteArticleHandler = (articleId, userId, articleTags) => {
    projectDB.ref(`articles/${articleId}`)
      .remove()
      .then(() => {
        return projectDB.ref(`users/${userId}/articlesref/${articleId}`)
          .remove()
      })
      .then(() => {
        articleTags.trim().split(" ").forEach((tag) => {
          projectDB.ref(`tags/${tag.substring(1)}/articlesref/${articleId}`)
            .remove();
        })
      })
      .then(() => {
        setArticle({});
      })
  }
  const getUserNameById = (id) => {
    let name;
    projectDB.ref("users/" + id + "/username").on("value", (snapshot) => {
      name = snapshot.val();
      setArticleOwnerName(name);
    })
  }
  const getUserPhotoById = (id) => {
    let photo;
    projectDB.ref("users/" + id + "/userphoto").on("value", (snapshot) => {
      photo = snapshot.val();
      setArticleOwnerPhoto(photo);
    })
  }
  const getArticleInfo = (data) => {
    const article = {};
    Object.entries(data).reverse().map(e => {
      Object.assign(article, {
        publishedDate: moment(new Date(+e[0])).format("DD.MM.YYYY"),
        key: e[0],
        comments: e[1].comments || {},
        liked: e[1].liked || {},
        disliked: e[1].disliked || {},
      })
      return Object.entries(e[1])[0];
    }).forEach((e) => {
      article.articleOwnerId = e[0];
      for (let articleContent in e[1]) article[articleContent] = e[1][articleContent];
    })
    return article;
  }
  const ArticleFromMarkdown = () => {
    if (article) {
      const emoji = require('markdown-it-emoji');
      const sub = require('markdown-it-sub');
      const sup = require('markdown-it-sup');
      const footnote = require('markdown-it-footnote');
      const abbr = require('markdown-it-abbr');
      const defflist = require('markdown-it-deflist');
      const md = require('markdown-it')({
        html: true,
        linkify: true,
        typographer: true,
        breaks: true,
      })
        .use(emoji)
        .use(sub)
        .use(sup)
        .use(footnote)
        .use(abbr)
        .use(defflist);
      const result = md.render(article.articleText);
      return result
    }
  }
  const likeHandler = () => {
    setIsAppraisalLoading(true);
    const timestamp = Date.now();
    const likeTimestamp = Object.keys(articleLiked);
    const usersLiked = Object.values(articleLiked);
    if (usersLiked.find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = likeTimestamp[usersLiked.indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          setArticleLiked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      return;
    } else if (Object.values(articleDisliked).find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = Object.keys(articleDisliked)[Object.values(articleDisliked).indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          return projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${timestamp}/`)
            .set(localStorage.getItem("currentUserId"))
        })
        .then(() => {
          setArticleLiked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
          setArticleDisliked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false)
        });
      return;
    }
    projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${timestamp}/`)
      .set(localStorage.getItem("currentUserId"))
      .then(() => {
        setArticleLiked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
        setIsAppraisalLoading(false);
      })
  }
  const dislikeHandler = () => {
    setIsAppraisalLoading(true);
    const timestamp = Date.now();
    const likeTimestamp = Object.keys(articleDisliked);
    const usersDisliked = Object.values(articleDisliked);
    if (usersDisliked.find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = likeTimestamp[usersDisliked.indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          setArticleDisliked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      return;
    } else if (Object.values(articleLiked).find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = Object.keys(articleLiked)[Object.values(articleLiked).indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          return projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${timestamp}/`)
            .set(localStorage.getItem("currentUserId"))
        })
        .then(() => {
          setArticleDisliked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
          setArticleLiked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      return;
    }
    projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${timestamp}/`)
      .set(localStorage.getItem("currentUserId"))
      .then(() => {
        setArticleDisliked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
        setIsAppraisalLoading(false);
      })
  }

  useEffect(() => {
    projectDB.ref(`articles/${articleId}`).on('value', (snapshot) => {
      const data = snapshot.val();
      if (!data) {
        setIsArticleExist(false);
        setIsLoading(false);
        return;
      }
      setArticle(getArticleInfo(Object.fromEntries([[articleId, data]])));
      setIsLoading(false);
    });
  }, []);
  useEffect(() => {
    if (article) {
      getUserPhotoById(article.articleOwnerId);
      getUserNameById(article.articleOwnerId);
      setArticleLiked(article.liked)
      setArticleDisliked(article.disliked)
      setArticleComments(article.comments)
    }
  }, [article]);
  useEffect(() => (() => {
    setArticle(null);
  }), []);
  return (
    <Container style={{ maxWidth: "980px" }}>
      <div style={{ padding: "100px 0px 0px" }}>
        <Paper>
          {isLoading ?
            <div className={styles.messagesContainer}>
              <Loader color="primary" />
            </div> :
            isArticleExist ?
              <Card style={{ borderColor: "#888" }} variant="outlined">
                <CardHeader
                  avatar={
                    <Avatar>
                      {articleOwnerPhoto ? <img className={styles.userPhoto} src={articleOwnerPhoto} alt="" /> : null}
                    </Avatar>
                  }
                  action={
                    localStorage.getItem("currentUserId") === article.articleOwnerId ?
                      <>
                        <NavLink tabIndex="-1" to={`/medium-clone/articles/${article.key}/edit`}>
                          <IconButton
                            style={{ margin: 0 }}
                            aria-label="edit article"
                            className={styles.iconButtons}

                          >
                            <EditIcon />
                          </IconButton>
                        </NavLink>
                        <IconButton
                          style={{ margin: "0px 0px 0px 5px" }}
                          aria-label="delete article"
                          className={styles.iconButtons}
                          onClick={() => {
                            setIsDeleting(true);
                            deleteArticleHandler(article.key, article.articleOwnerId, article.articleTags)
                          }}
                          color={isDeleting ? "primary" : "default"}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </> :
                      null
                  }
                  className={styles.cardHeaderRoot}
                  title={articleOwnerName}
                  subheader={article.publishedDate}
                />
                <div style={{ padding: "0px 16px" }}><Divider /></div>
                <CardContent style={{ padding: "8px 16px 16px" }}>
                  <Typography style={{ margin: "0px 0px 7px 0px" }} variant="h5" color="textPrimary" component="p">
                    {article.articleTitle}
                  </Typography>
                  <Typography style={{ margin: "0px 0px 10px 0px" }} variant="body1" color="textSecondary" component="p">
                    {article.articleDesc}
                  </Typography>
                  <div className="markdown-body" style={{ padding: "0px 0px 10px 0px" }} dangerouslySetInnerHTML={{ __html: ArticleFromMarkdown() }}>
                    {/*Text in markdown*/}
                  </div>
                  <Divider />
                  <div className={styles.appraiserButtons}>
                    <IconButton
                      aria-label="comments"
                      onClick={handleExpandClick}
                      aria-expanded={expanded}
                      className={styles.iconButtons}
                    >
                      <CommentIcon style={{ margin: "0px 5px 0px 0px" }} />
                      <span>{(Object.keys(articleComments).length).toLocaleString("en")}</span>
                    </IconButton>
                    <div>
                      <IconButton
                        aria-label="likes"
                        className={styles.iconButtons}
                        onClick={likeHandler}
                        color={Object.values(articleLiked).find(e => e === localStorage.getItem("currentUserId")) ? "primary" : "default"}
                        disabled={isAppraisalLoading}
                      >
                        <ThumbUpIcon style={{ margin: "0px 5px 0px 0px" }} />
                        <span>{(Object.keys(articleLiked).length).toLocaleString("en")}</span>
                      </IconButton>
                      <IconButton
                        aria-label="dislikes"
                        className={styles.iconButtons}
                        onClick={dislikeHandler}
                        color={Object.values(articleDisliked).find(e => e === localStorage.getItem("currentUserId")) ? "primary" : "default"}
                        disabled={isAppraisalLoading}
                      >
                        <ThumbDownIcon style={{ margin: "0px 5px 0px 0px" }} />
                        <span>{(Object.keys(articleDisliked).length).toLocaleString("en")}</span>
                      </IconButton>
                    </div>
                    <Statistic liked={articleLiked} disliked={articleDisliked} currentLang={currentLang} />
                  </div>
                </CardContent>
                <Collapse in={expanded} timeout="auto" unmountOnExit>
                  <CardContent style={{ padding: "5px 15px 15px" }}>
                    <Comments
                      feedComments={articleComments}
                      setFeedComments={setArticleComments}
                      articleId={articleId}
                      currentLang={currentLang}
                      articleOwnerId={localStorage.getItem("currentUserId")}
                    />
                  </CardContent>
                </Collapse>
              </Card >
              :
              <div className={styles.messagesContainer}>
                <Typography variant="body1" color="textPrimary" component="p">
                  {feedInfo.info.articleNotExist}
                </Typography>
              </div>}
        </Paper>
      </div>
    </Container>
  )
}

export default withRouter(Article);