import React, { useState, useRef, useEffect } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import InputLabel from '@material-ui/core/InputLabel';
import OutlinedInput from '@material-ui/core/OutlinedInput';
import Button from '@material-ui/core/Button';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import { Redirect, withRouter } from "react-router-dom";
import Typography from '@material-ui/core/Typography';
import Loader from "components/Loader/Loader.js";

const useStyles = makeStyles((theme) => ({
  root: {
    padding: "20px",
    display: "grid",
    gap: "15px",
  },
  fieldsetStyles: {
    margin: 0,
  },
  messagesContainer: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "20px"
  }
}));

function NewArticleForm(props) {
  const [articleTitle, setArticleTitle] = useState('');
  const [articleDesc, setArticleDesc] = useState('');
  const [articleText, setArticleText] = useState('');
  const [articleTags, setArticleTags] = useState('');
  const [fieldsErrors, setFieldsErrors] = useState({
    articleTitleErr: false,
    articleDescErr: false,
    articleTextErr: false,
    articleTagsErr: false,
  })
  const [errorMessage, setErrorMessage] = useState("");
  const [isSubmited, setIsSubmited] = useState(false);
  const { currentLang } = props;
  const styles = useStyles();
  const isSubmiting = useRef(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isArticleExist, setIsArticleExist] = useState(true);
  const [isAllowed, setIsAllowed] = useState(true);

  const SubmitHandler = (e) => {
    e.preventDefault();
    if (isAllFieldsCorrect() && !isSubmiting.current) {
      isSubmiting.current = true;
      sendArticleAndRedirect();
      return;
    }
  }
  const sendArticleAndRedirect = () => {
    const timestamp = Date.now();
    projectDB.ref(`articles/${timestamp}/${localStorage.getItem("currentUserId")}`).set({
      articleTitle: articleTitle.trim(),
      articleDesc: articleDesc.trim(),
      articleText: articleText.trim(),
      articleTags: articleTags.trim(),
    }).then(() => {
      projectDB.ref(`users/${localStorage.getItem("currentUserId")}/articlesref/${timestamp}`)
        .set(timestamp);
    }).then(() => {
      if (articleTags.trim()) {
        articleTags.trim().split(" ").forEach((tag) => {
          projectDB.ref(`tags/${tag.substring(1)}/articlesref/${timestamp}`)
            .set(timestamp)
            .then(() => {
              projectDB.ref(`tags/${tag.substring(1)}/lastUses`)
                .set(timestamp)
            });
        })
      }
    }).then(() => {
      setIsSubmited(true);
    });
  }
  const isAllFieldsCorrect = () => {
    setFieldsErrors({
      articleTitleErr: articleTitle.trim().length === 0,
      articleDescErr: articleDesc.trim().length === 0,
      articleTextErr: articleText.trim().length === 0,
      articleTagsErr: !isTagsCorrect(),
    })
    if (articleTitle.trim().length === 0 || articleDesc.trim().length === 0 || articleText.trim().length === 0 || !isTagsCorrect()) {
      if (articleTitle.trim().length === 0 || articleDesc.trim().length === 0 || articleText.trim().length === 0) {
        setErrorMessage(LangsTranslate[currentLang].newArticle["article-errors"].emptyFields);
      }
      return false;
    }
    return true;
  }
  const isTagsCorrect = () => {
    const formErrors = LangsTranslate[currentLang].newArticle["article-errors"];
    const tagsArr = articleTags.split(" ");
    if (articleTags.length === 0) return true;
    if (tagsArr.find(tag => tag[0] !== "#")) {
      setErrorMessage(formErrors.startWithHashTag);
      return false;
    }
    if (tagsArr.find(tag => (tag[0] === "#" && tag.length === 1))) {
      setErrorMessage(formErrors.afterHashTagName);
      return false;
    }
    if (tagsArr.length !== [...new Set(tagsArr)].length) {
      setErrorMessage(formErrors.dublicatTags);
      return false;
    }
    if (!articleTags.split(" ").find(tag => tag.substring(1).match(/^[a-zA-Zа-яА-Я0-9-_]+$/))) {
      setErrorMessage(formErrors.forbiddenSymbols);
      return false;
    }
    return true;
  }
  const articleTitleHandler = (event) => {
    if (event.target.value.length > 42) {
      event.preventDefault();
      return;
    }
    setArticleTitle(event.target.value)
  }
  const articleDescHandler = (event) => {
    if (event.target.value.length > 180) {
      event.preventDefault();
      return;
    }
    setArticleDesc(event.target.value)
  }
  const articleTextHandler = (event) => {
    setArticleText(event.target.value)
  }
  const articleTagsHandler = (event) => {
    const tagsArr = event.target.value.split(" ");
    if (tagsArr[tagsArr.length - 1].length > 18) {
      event.preventDefault();
      return;
    }
    setArticleTags(event.target.value);
  }
  if (isSubmited) {
    return <Redirect to="/" />;
  }

  useEffect(() => {
    const articleId = props.match.params.articleId;
    if (articleId) {
      setIsLoading(true);
      projectDB.ref(`articles/${articleId}`).on('value', (snapshot) => {
        const data = snapshot.val();
        if (!data) {
          setIsArticleExist(false);
          setIsLoading(false);
          return;
        }
        const article = Object.entries(data)
        if (article[0][0] !== localStorage.getItem("currentUserId")) {
          setIsAllowed(false);
          setIsLoading(false);
          return
        }
        setArticleTitle(article[0][1].articleTitle);
        setArticleDesc(article[0][1].articleDesc);
        setArticleText(article[0][1].articleText);
        setArticleTags(article[0][1].articleTags);
        setIsLoading(false);
      });
    }
  }, []);

  return (
    isLoading ?
      <div className={styles.messagesContainer}>
        <Loader color="primary" />
      </div> :
      isArticleExist ?
        isAllowed ?
          <form onSubmit={SubmitHandler} className={styles.root} noValidate autoComplete="off" >
            <fieldset className={styles.fieldsetStyles}>
              <FormControl error={fieldsErrors.articleTitleErr} style={{ width: "100%" }} variant="outlined">
                <InputLabel htmlFor="articleTitle">{LangsTranslate[currentLang].newArticle["article-title"]}</InputLabel>
                <OutlinedInput multiline value={articleTitle} onChange={articleTitleHandler} id="articleTitle" label={LangsTranslate[currentLang].newArticle["article-title"]} />
              </FormControl>
            </fieldset>
            <fieldset className={styles.fieldsetStyles}>
              <FormControl error={fieldsErrors.articleDescErr} style={{ width: "100%" }} variant="outlined">
                <InputLabel htmlFor="articleAbout">{LangsTranslate[currentLang].newArticle["article-about"]}</InputLabel>
                <OutlinedInput multiline id="articleAbout" value={articleDesc} onChange={articleDescHandler} label={LangsTranslate[currentLang].newArticle["article-about"]} />
              </FormControl>
            </fieldset>
            <fieldset className={styles.fieldsetStyles}>
              <FormControl error={fieldsErrors.articleTextErr} style={{ width: "100%" }} variant="outlined">
                <InputLabel htmlFor="articleText">{LangsTranslate[currentLang].newArticle["article-text"]}</InputLabel>
                <OutlinedInput value={articleText} style={{ minHeight: "181px", alignItems: "start" }} multiline onChange={articleTextHandler} id="articleText" label={LangsTranslate[currentLang].newArticle["article-text"]} />
              </FormControl>
            </fieldset>
            <fieldset className={styles.fieldsetStyles}>
              <FormControl error={fieldsErrors.articleTagsErr} style={{ width: "100%" }} variant="outlined">
                <InputLabel htmlFor="articleTags">{LangsTranslate[currentLang].newArticle["article-tags"].label}</InputLabel>
                <OutlinedInput value={articleTags} onChange={articleTagsHandler} multiline id="articleTags" label={LangsTranslate[currentLang].newArticle["article-tags"].label} />
                <FormHelperText id="component-helper-text">{LangsTranslate[currentLang].newArticle["article-tags"].helper}</FormHelperText>
              </FormControl>
            </fieldset>
            {errorMessage ?
              <Typography style={{ textAlign: "center" }} variant="body1" color="error" component="div">
                {errorMessage}
              </Typography> :
              null}
            <fieldset style={{ justifySelf: "center" }} className={styles.fieldsetStyles}>
              <FormControl>
                <Button size="large" type="submit" variant="contained" color="primary">
                  {LangsTranslate[currentLang].newArticle["article-submit"]}
                </Button>
              </FormControl>
            </fieldset>
          </form> :
          <div className={styles.messagesContainer}>
            <Typography variant="body1" color="textPrimary" component="p">
              {LangsTranslate[currentLang].newArticle["article-errors"].notAllowed}
            </Typography>
          </div> :
        <div className={styles.messagesContainer}>
          <Typography variant="body1" color="textPrimary" component="p">
            {LangsTranslate[currentLang].Feeds.info.articleNotExist}
          </Typography>
        </div>
  );
}

export default withRouter(NewArticleForm);