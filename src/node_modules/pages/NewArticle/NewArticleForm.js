import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import InputLabel from '@material-ui/core/InputLabel';
import OutlinedInput from '@material-ui/core/OutlinedInput';
import Button from '@material-ui/core/Button';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import { Redirect } from "react-router-dom";

const useStyles = makeStyles((theme) => ({
  root: {
    padding: "20px",
    display: "grid",
    gap: "15px"
  },
  fieldsetStyles: {
    margin: 0,
  }
}));

export default function ComposedTextField(props) {
  const [articleTitle, setArticleTitle] = React.useState('');
  const [articleDesc, setArticleDesc] = React.useState('');
  const [articleText, setArticleText] = React.useState('');
  const [articleTags, setArticleTags] = React.useState('');
  const [fieldsErrors, setFieldsErrors] = React.useState({
    articleTitleErr: false,
    articleDescErr: false,
    articleTextErr: false,
    articleTagsErr: false,
  })
  const [isSubmit, setIsSubmit] = React.useState(false);
  const { currentLang } = props;
  const styles = useStyles();

  const SubmitHandler = (e) => {
    e.preventDefault();
    if (isAllFieldsCorrect()) {
      projectDB.ref('articles/' + Date.now()).set({
        articleTitle: articleTitle.trim(),
        articleDesc: articleDesc.trim(),
        articleText: articleText.trim(),
        articleTags: articleTags.trim(),
        owner: localStorage.getItem("currentUserId")
      })
        .then(() => {
          setIsSubmit(true);
        })
    }
  }

  const isAllFieldsCorrect = () => {
    setFieldsErrors({
      articleTitleErr: articleTitle.length === 0,
      articleDescErr: articleDesc.length === 0,
      articleTextErr: articleText.length === 0,
      articleTagsErr: !isTagsCorrect(),
    })
    if (articleTitle.length === 0 || articleDesc.length === 0 || articleText.length === 0 || !isTagsCorrect()) {
      return false;
    }
    return true;
  }
  const isTagsCorrect = () => {
    return articleTags.split(" ").every(str => str.length === 0 ? true : str.match(/^\#[a-zA-Z0-9А-Яа-я]+$/));
  }
  const articleTitleHandler = (event) => {
    if (event.target.value.length > 42) {
      event.preventDefault();
      return;
    }
    setArticleTitle(event.target.value)
  }
  const articleDescHandler = (event) => {
    if (event.target.value.length > 80) {
      event.preventDefault();
      return;
    }
    setArticleDesc(event.target.value)
  }
  const articleTextHandler = (event) => {
    setArticleText(event.target.value)
  }
  const articleTagsHandler = (event) => {
    setArticleTags(event.target.value)
  }
  if (isSubmit) {
    return <Redirect to="/" />
  }
  return (
    <form onSubmit={SubmitHandler} className={styles.root} noValidate autoComplete="off">
      <fieldset className={styles.fieldsetStyles}>
        <FormControl error={fieldsErrors.articleTitleErr} style={{ width: "100%" }} variant="outlined">
          <InputLabel htmlFor="articleTitle">{LangsTranslate[currentLang].newArticle["article-title"]}</InputLabel>
          <OutlinedInput multiline value={articleTitle} onChange={articleTitleHandler} id="articleTitle" label={LangsTranslate[currentLang].newArticle["article-title"]} />
        </FormControl>
      </fieldset>
      <fieldset className={styles.fieldsetStyles}>
        <FormControl error={fieldsErrors.articleDescErr} style={{ width: "100%" }} variant="outlined">
          <InputLabel htmlFor="articleAbout">{LangsTranslate[currentLang].newArticle["article-about"]}</InputLabel>
          <OutlinedInput multiline id="articleAbout" value={articleDesc} onChange={articleDescHandler} label={LangsTranslate[currentLang].newArticle["article-about"]} />
        </FormControl>
      </fieldset>
      <fieldset className={styles.fieldsetStyles}>
        <FormControl error={fieldsErrors.articleTextErr} style={{ width: "100%" }} variant="outlined">
          <InputLabel htmlFor="articleText">{LangsTranslate[currentLang].newArticle["article-text"]}</InputLabel>
          <OutlinedInput rows={9} multiline onChange={articleTextHandler} id="articleText" label={LangsTranslate[currentLang].newArticle["article-text"]} />
        </FormControl>
      </fieldset>
      <fieldset className={styles.fieldsetStyles}>
        <FormControl error={fieldsErrors.articleTagsErr} style={{ width: "100%" }} variant="outlined">
          <InputLabel htmlFor="articleTags">{LangsTranslate[currentLang].newArticle["article-tags"].label}</InputLabel>
          <OutlinedInput onChange={articleTagsHandler} multiline id="articleTags" label={LangsTranslate[currentLang].newArticle["article-tags"].label} />
          <FormHelperText id="component-helper-text">{LangsTranslate[currentLang].newArticle["article-tags"].helper}</FormHelperText>
        </FormControl>
      </fieldset>
      <fieldset style={{ justifySelf: "center" }} className={styles.fieldsetStyles}>
        <FormControl>
          <Button size="large" type="submit" variant="contained" color="primary">
            {LangsTranslate[currentLang].newArticle["article-submit"]}
          </Button>
        </FormControl>
      </fieldset>
    </form>
  );
}
