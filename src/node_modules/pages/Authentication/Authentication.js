import React, { useState } from 'react';
import Paper from '@material-ui/core/Paper';
import { makeStyles } from '@material-ui/core/styles';
import "./Authentication.scss";
import Typography from '@material-ui/core/Typography';
import Link from '@material-ui/core/Link';
import { withRouter, Redirect } from "react-router-dom";
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";

import { projectDB, auth } from "firebaseConfig/firebaseConfig.js";
const useStyles = makeStyles({
  linkStyle: {
    fontSize: "16px",
    cursor: "pointer",
  }
})

const Authentication = (props) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [submitPassword, setSubmitPassword] = useState("");
  const [isLogin, setIsLogin] = useState(false);
  const [userLocalID, setUserLocalID] = useState(null);
  const [Exception, setException] = useState({
    isEx: false,
    exMess: null,
  });

  const { currentLang } = props;
  const classes = useStyles();
  const isRegistr = props.history.location.pathname === "/register";

  const linkHandler = (e) => {
    e.preventDefault();
    isRegistr
      ? props.history.push("/login")
      : props.history.push("/register");
  }

  const handleSubmit = (e) => {
    e.preventDefault();
    isRegistr
      ? createAccount()
      : loginAccount();
  }
  const createAccount = () => {
    auth.createUserWithEmailAndPassword(email, password)
      .then(e => {
        setIsLogin(true);
      })
      .catch(error => {
        setException({
          isEx: true,
          exMess: error.message,
        });
        return;
      });
  }
  const loginAccount = () => {
    auth.signInWithEmailAndPassword(email, password)
      .then(e => {
        setIsLogin(true);
      })
      .catch(error => {
        setException({
          isEx: true,
          exMess: error.message,
        });
        return;
      });
  }
  // auth.onAuthStateChanged(user => {
  // });

  const ErrorMessage = () => {
    return (
      <div className="error-message" >
        {Exception.exMess}
      </div>
    );
  }
  return (
    <div className="Authentication">
      { isLogin && <Redirect to="/" />}
      <div className="container">
        <div className="Authentication__body">
          <Paper>
            <div className="Authentication__auth auth">
              <Typography variant="h4" component="h2">
                {isRegistr
                  ? LangsTranslate[currentLang].Auth.title["title-regist"]
                  : LangsTranslate[currentLang].Auth.title["title-sign"]}
              </Typography>
              <form onSubmit={handleSubmit} action="#" method="GET">
                <fieldset className="auth__field">
                  <fieldset className="auth__email">
                    <TextField
                      type="email"
                      placeholder="your@gmail.com"
                      label={LangsTranslate[currentLang].Auth.form.email.label}
                      variant="filled"
                      value={email}
                      onChange={e => setEmail(e.target.value)}
                    />
                  </fieldset>
                  <fieldset className="auth__pass">
                    <TextField
                      type="password"
                      placeholder="password"
                      label={LangsTranslate[currentLang].Auth.form.password["label-enter"]}
                      variant="filled"
                      value={password}
                      onChange={e => setPassword(e.target.value)}
                      style={isRegistr
                        ? null
                        : { margin: "0px 0px 20px 0px" }}
                    />
                  </fieldset>
                  {isRegistr
                    ? <fieldset className="auth__submit-pass">
                      <TextField
                        type="password"
                        placeholder="password"
                        label={LangsTranslate[currentLang].Auth.form.password["label-submit"]}
                        variant="filled"
                        value={submitPassword}
                        onChange={e => setSubmitPassword(e.target.value)}
                        style={{ margin: "0px 0px 20px 0px" }}
                      />
                    </fieldset>
                    : null}
                  {Exception.isEx && <ErrorMessage />}
                  <Button
                    variant="contained"
                    color="primary"
                    type="submit">{isRegistr
                      ? LangsTranslate[currentLang].Auth.form.submitButton["reg"]
                      : LangsTranslate[currentLang].Auth.form.submitButton["sign"]}
                  </Button>
                </fieldset>
              </form>
              <p><Link
                onClick={linkHandler}
                className={classes.linkStyle}
                color="primary">{isRegistr
                  ? LangsTranslate[currentLang].Auth.form.LinkToLogin
                  : LangsTranslate[currentLang].Auth.form.LinkToRegistration}</Link>
              </p>
            </div>
          </Paper>
        </div>
      </div>
    </div >
  );
}

export default withRouter(Authentication);